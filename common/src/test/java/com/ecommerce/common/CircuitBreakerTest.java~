package com.ecommerce.common;


import com.commerce.common.config.CircuitBreakerConfig;
import io.github.resilience4j.circuitbreaker.CircuitBreaker;
import io.github.resilience4j.circuitbreaker.CircuitBreakerRegistry;
import io.github.resilience4j.retry.Retry;
import io.github.resilience4j.retry.RetryRegistry;
import org.junit.jupiter.api.Test;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;

import java.util.concurrent.atomic.AtomicInteger;
import java.util.function.Supplier;

import static org.junit.jupiter.api.Assertions.*;

public class CircuitBreakerTest {

    @Configuration
    @Import(CircuitBreakerConfig.class)
    static class TestConfig {
    }

    @Test
    public void testCircuitBreakerAndRetry() {
        // Spring 컨텍스트 수동 생성
        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(TestConfig.class);

        // 빈 가져오기
        CircuitBreaker circuitBreaker = context.getBean("commonCircuitBreaker", CircuitBreaker.class);
        Retry retry = context.getBean("commonRetry", Retry.class);

        // 테스트용 서비스 호출 카운터
        AtomicInteger serviceCallCounter = new AtomicInteger(0);

        // 실패하는 서비스 시뮬레이션 (처음 3번은 실패, 그 이후는 성공)
        Supplier<String> failingService = () -> {
            int callCount = serviceCallCounter.incrementAndGet();
            System.out.println("서비스 호출 횟수: " + callCount);

            if (callCount <= 3) {
                System.out.println("서비스 호출 실패!");
                throw new RuntimeException("서비스 일시적 오류");
            }

            System.out.println("서비스 호출 성공!");
            return "성공 결과";
        };

        // CircuitBreaker를 외부에, Retry를 내부에 배치
        Supplier<String> decoratedSupplier = CircuitBreaker.decorateSupplier(circuitBreaker,
            Retry.decorateSupplier(retry, failingService));

        try {
            // 실행
            String result = decoratedSupplier.get();
            System.out.println("호출 결과: " + result);
            assertEquals("성공 결과", result);
        } catch (Exception e) {
            System.out.println("최종 예외 발생: " + e.getMessage());
            fail("재시도 후에도 실패했습니다: " + e.getMessage());
        }

        // 회로 차단기 상태 확인
        assertEquals(CircuitBreaker.State.CLOSED, circuitBreaker.getState());

        // 호출 횟수 확인 (3번의 재시도 + 1번의 성공)
        assertEquals(4, serviceCallCounter.get());

        // 통계 확인
        System.out.println("실패한 호출 수: " + circuitBreaker.getMetrics().getNumberOfFailedCalls());
        System.out.println("성공한 호출 수: " + circuitBreaker.getMetrics().getNumberOfSuccessfulCalls());

        // 컨텍스트 닫기
        context.close();
    }
}