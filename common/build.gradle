plugins {
	id 'java'
	id 'java-library'
	id 'maven-publish'
	id 'org.springframework.boot' version '3.2.6'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.ecommerce'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
	withSourcesJar()
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}
}
tasks.named('generateMetadataFileForMavenJavaPublication') {
	suppressedValidationErrors.add('dependencies-without-versions')
}

repositories {
	mavenCentral()
}

bootJar {
	enabled = false
}

jar {
	enabled = true
	from {
		configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
	}
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	// Spring Data JPA
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	// Spring Cloud BOM을 추가하여 Resilience4j 버전 자동 관리
	dependencyManagement {
		imports {
			mavenBom "org.springframework.cloud:spring-cloud-dependencies:2023.0.1"
		}
	}

	// Circuit Breaker 관련 의존성
	implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j'

	// Resilience4j 핵심 라이브러리 추가 (필수)
	implementation 'io.github.resilience4j:resilience4j-spring-boot3:2.2.0'

	// Actuator (모니터링용)
	implementation 'org.springframework.boot:spring-boot-starter-actuator'


	// QueryDSL
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	// Kafka
	implementation 'org.springframework.kafka:spring-kafka'
	testImplementation 'org.springframework.kafka:spring-kafka-test'


	// prometheus
	implementation 'io.micrometer:micrometer-registry-prometheus'


	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'io.micrometer:micrometer-tracing-bridge-brave'
	implementation 'io.zipkin.reporter2:zipkin-reporter-brave'

	implementation 'io.github.openfeign:feign-micrometer'

	// Kafka를 통한 Zipkin 추적 데이터 전송을 위한 의존성
	implementation 'io.zipkin.reporter2:zipkin-sender-kafka'
	implementation 'io.zipkin.brave:brave-instrumentation-kafka-clients:5.16.0'
	implementation 'io.zipkin.brave:brave'
	implementation 'io.zipkin.brave:brave-context-slf4j'

	// OkHttp를 통한 Zipkin 추적 데이터 전송을 위한 의존성
	implementation 'io.zipkin.reporter2:zipkin-sender-okhttp3'
}

test {
	enabled = false
}

tasks.named('test') {
	useJUnitPlatform()
}
